"""
Written by Nahum Maurice on Thur, December 8, 2022

This is the data structure that contains all messages. It's public, and is
shared by all the nodes in the network.
"""
from abc import ABCMeta, abstractmethod
from typing import Type

from .message import Message


class BookInterface(metaclass=ABCMeta):

    @abstractmethod
    def __init__(self) -> None:
        ...


class SingleBookInstanceViolation(BaseException):

    def __init__(self) -> None:
        super().__init__("Single Book Instance Violation")


class Book(BookInterface):

    # One single instance of the class
    __instance = None

    # The algorithm version
    __version = 0

    def __init__(self) -> None:
        # There should always be one instance of the book and this instance
        # should be the one shared by every node, but only be modifiable by
        # the master node. Therefore, this class follows the pattern of
        # Singleton
        if Book.__instance is not None:
            raise SingleBookInstanceViolation

        # The ID (__id) of a book is its primary identifier. It is used to
        # keep track of the different instances of the Book that handles
        # the transactions / communication.
        self.__id: str = ""

        # Each book should have a message0, the equivalent of the Genesis
        # Block for blockchain architecture. It should be generated by the
        # book uppon creation.
        self.__message0: str = ""

        # Each book is initiated by the first node connecting to the network.
        # This should be the address of the node.
        self.__firstNode: str = ""

        # Each book contains a list of messages, these are encrypted message
        # with addresses
        self.__messages: list[Type[Message]] = []

        # Assigning __instance to the newly created one
        Book.__instance = self
